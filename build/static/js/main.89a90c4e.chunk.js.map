{"version":3,"sources":["components/Header.js","components/NuevaCita.js","components/Cita.js","components/ListaCitas.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","stateInicial","cita","mascota","propietario","fecha","hora","síntomas","error","NuevaCita","state","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","nuevaCita","id","uuid","props","crearNuevaCita","this","onSubmit","type","placeholder","onChange","Component","Cita","eliminarCita","onClick","ListaCitas","citas","mensaje","Object","keys","length","map","key","App","datos","filter","citasLS","localStorage","getItem","JSON","parse","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAYeA,G,MATA,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAF,OACX,gCACI,wBAAIC,UAAU,eAAeD,M,2kBCDrC,IAAME,EAAe,CACjBC,KAAO,CACHC,QAAU,GACVC,YAAc,GACdC,MAAQ,GACRC,KAAO,GACPC,cAAW,IAEfC,OAAO,GAoJIC,E,2MA/IXC,M,KAAaT,G,EAGZU,aAAe,SAAAC,GAEX,EAAKC,SAAS,CACVX,KAAI,KACG,EAAKQ,MAAMR,KADd,eAECU,EAAEE,OAAOC,KAAQH,EAAEE,OAAOE,W,EAMvCC,aAAe,SAAAL,GACXA,EAAEM,iBADc,MAIuC,EAAKR,MAAMR,KAA1DC,EAJQ,EAIRA,QAASC,EAJD,EAICA,YAAaC,EAJd,EAIcA,MAAOC,EAJrB,EAIqBA,KAAMC,EAJ3B,EAI2BA,cAG3C,GAAe,KAAZJ,GAAkC,KAAhBC,GAAgC,KAAVC,GAAyB,KAATC,GAA4B,KAAbC,EAA1E,CASA,IAAMY,EAAS,KAAO,EAAKT,MAAMR,MACjCiB,EAAUC,GAAKC,MAGf,EAAKC,MAAMC,eAAeJ,GAG1B,EAAKN,SAAL,KACOZ,SAhBJ,EAAKY,SAAS,CACVL,OAAO,K,wEAoBV,IAGGA,EAAUgB,KAAKd,MAAfF,MAER,OACI,yBAAKR,UAAU,kBACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,+BAAd,iDAIEQ,EAAQ,yBAAKR,UAAU,4CAAf,kCACiC,KAE3C,0BACIyB,SAAUD,KAAKP,cAEf,yBAAKjB,UAAU,kBACV,2BAAOA,UAAU,oCAAjB,kBACG,yBAAKA,UAAU,sBACX,2BACA0B,KAAK,OACL1B,UAAU,eACV2B,YAAY,iBACZZ,KAAK,UACLa,SAAUJ,KAAKb,aACfK,MAAOQ,KAAKd,MAAMR,KAAKC,YAKnC,yBAAKH,UAAU,kBACV,2BAAOA,UAAU,oCAAjB,oBACG,yBAAKA,UAAU,sBACX,2BACA0B,KAAK,OACL1B,UAAU,eACV2B,YAAY,kBACZZ,KAAK,cACLa,SAAUJ,KAAKb,aACfK,MAAOQ,KAAKd,MAAMR,KAAKE,gBAKnC,yBAAKJ,UAAU,kBACV,2BAAOA,UAAU,oCAAjB,SACG,yBAAKA,UAAU,qBACX,2BACA0B,KAAK,OACL1B,UAAU,eACVe,KAAK,QACLa,SAAUJ,KAAKb,aACfK,MAAOQ,KAAKd,MAAMR,KAAKG,SAI/B,2BAAOL,UAAU,oCAAjB,QACI,yBAAKA,UAAU,qBACX,2BACA0B,KAAK,OACL1B,UAAU,eACVe,KAAK,OACLa,SAAUJ,KAAKb,aACfK,MAAOQ,KAAKd,MAAMR,KAAKI,SAKnC,yBAAKN,UAAU,kBACV,2BAAOA,UAAU,oCAAjB,eACG,yBAAKA,UAAU,sBACX,8BACAA,UAAU,eACVe,KAAK,cACLY,YAAY,yCACZC,SAAUJ,KAAKb,aACfK,MAAOQ,KAAKd,MAAMR,KAAKK,kBAKnC,2BAAOmB,KAAK,SAAS1B,UAAU,sCAAsCgB,MAAM,wB,GA/H3Ea,aCYTC,EAzBF,SAAC,GAAD,IAAE5B,EAAF,EAAEA,KAAM6B,EAAR,EAAQA,aAAR,OACT,yBAAK/B,UAAU,cACX,yBAAKA,UAAU,cACX,wBAAIA,UAAU,QAAQE,EAAKC,SAC3B,uBAAGH,UAAU,aAAY,oDAAzB,IAAuDE,EAAKE,aAC5D,uBAAGJ,UAAU,aAAY,yCAAzB,IAA+CE,EAAKG,OACpD,uBAAGL,UAAU,aAAY,wCAAzB,IAA8CE,EAAKI,MACnD,uBAAGN,UAAU,aAAY,+CAAzB,KACA,uBAAGA,UAAU,aAAaE,EAAKK,eAE/B,4BACIP,UAAU,iBACVgC,QAAS,kBAAMD,EAAa7B,EAAKkB,MAFrC,kBCsBGa,EA/BI,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,MAAOH,EAAkB,EAAlBA,aAGlBI,EAAwC,IAA9BC,OAAOC,KAAKH,GAAOI,OAAe,eAAiB,qBAEnE,OACI,yBAAKtC,UAAU,kBACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,0BAA0BmC,GAExC,yBAAKnC,UAAU,eACVkC,EAAMK,IAAI,SAAArC,GAAI,OACX,kBAAC,EAAD,CACIsC,IAAKtC,EAAKkB,GACVlB,KAAMA,EACN6B,aAAcA,UC4D3BU,E,2MAxEb/B,MAAQ,CACNwB,MAAO,I,EAkBRX,eAAiB,SAAAmB,GAEf,IAAMR,EAAK,sBAAO,EAAKxB,MAAMwB,OAAlB,CAAyBQ,IAGpC,EAAK7B,SAAS,CACZqB,W,EAKJH,aAAe,SAAAX,GAEZ,IAGMc,EAHa,YAAO,EAAKxB,MAAMwB,OAGTS,OAAO,SAAAzC,GAAI,OAAIA,EAAKkB,KAAOA,IAGvD,EAAKP,SAAS,CACZqB,W,mFAjCH,IAAMU,EAAUC,aAAaC,QAAQ,SAClCF,GACDpB,KAAKX,SAAS,CACZqB,MAAQa,KAAKC,MAAMJ,O,2CAOtBC,aAAaI,QAAQ,QAASF,KAAKG,UAAU1B,KAAKd,MAAMwB,U,+BA6B1D,OACE,yBAAKlC,UAAU,aACb,kBAAC,EAAD,CACED,OAAO,wCAGT,yBAAKC,UAAU,OACX,yBAAKA,UAAU,qBACX,kBAAC,EAAD,CACEuB,eAAgBC,KAAKD,kBAI3B,yBAAKvB,UAAU,0BACb,kBAAC,EAAD,CACEkC,MAAOV,KAAKd,MAAMwB,MAClBH,aAAcP,KAAKO,sB,GA9DjBF,aCMEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.89a90c4e.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = ({titulo}) => (\r\n    <header>\r\n        <h1 className=\"text-center\">{titulo}</h1>\r\n    </header>\r\n);\r\nHeader.propTypes = {\r\n    titulo : PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport uuid from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst stateInicial = { \r\n    cita : {\r\n        mascota : '',\r\n        propietario : '',\r\n        fecha : '',\r\n        hora : '',\r\n        síntomas : ''\r\n    },\r\n    error: false\r\n    \r\n }\r\n\r\nclass NuevaCita extends Component {\r\n    state = { ...stateInicial }\r\n\r\n     //Cuando el usuario escribe en los campos\r\n     handleChange = e => {\r\n         //insertar lo que el usuario escribe en el state\r\n         this.setState({\r\n             cita : {\r\n                 ...this.state.cita,\r\n                 [e.target.name] : e.target.value\r\n             }\r\n         })\r\n     }\r\n\r\n     //Cuando el usuario envia el formulario\r\n     handleSubmit = e => {\r\n         e.preventDefault();\r\n\r\n         //Extraer valores del state\r\n         const { mascota, propietario, fecha, hora, síntomas }= this.state.cita;\r\n\r\n         //Validar que los campos estén completados\r\n         if(mascota === '' || propietario === '' || fecha === '' || hora === '' || síntomas === ''){\r\n            this.setState({\r\n                error: true\r\n            });\r\n            //detener ejecución\r\n            return;\r\n         }\r\n\r\n         //generar objeto con los datos\r\n         const nuevaCita = {...this.state.cita};\r\n         nuevaCita.id = uuid();\r\n\r\n         //Agregar la cita al state de App\r\n         this.props.crearNuevaCita(nuevaCita)\r\n\r\n         //Colocar en el state el stateInicial\r\n         this.setState({\r\n             ...stateInicial\r\n         })\r\n\r\n     }\r\n\r\n    render() { \r\n\r\n        //extraer el valor del state\r\n        const { error } = this.state\r\n\r\n        return ( \r\n            <div className=\"card mt-5 py-5\">\r\n                <div className=\"card-body\">\r\n                    <h2 className=\"card-title text-center mb-5\">\r\n                        Rellene los campos para solicitar nueva cita.\r\n                    </h2>\r\n\r\n                    { error ? <div className=\"alert alert-danger mt-2 mb-5 text-center\">\r\n                        Debe rellenar todos los campos</div> : null }\r\n\r\n                    <form\r\n                        onSubmit={this.handleSubmit}\r\n                    >\r\n                        <div className=\"form-group row\">\r\n                             <label className=\"col-sm-4 col-lg-2 col-form-label\">Nombre Mascota</label>\r\n                                <div className=\"col-sa-8 col-lg-10\">\r\n                                    <input \r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Nombre Mascota\"\r\n                                    name=\"mascota\" \r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.cita.mascota}                                   \r\n                                    />\r\n                                </div> \r\n                        </div>  \r\n\r\n                        <div className=\"form-group row\">\r\n                             <label className=\"col-sm-4 col-lg-2 col-form-label\">Dueño Mascota</label>\r\n                                <div className=\"col-sa-8 col-lg-10\">\r\n                                    <input \r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Nombre Dueño\"\r\n                                    name=\"propietario\"\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.cita.propietario}                                    \r\n                                    />\r\n                                </div> \r\n                        </div>  \r\n\r\n                        <div className=\"form-group row\">\r\n                             <label className=\"col-sm-4 col-lg-2 col-form-label\">Fecha</label>\r\n                                <div className=\"col-sa-8 col-lg-4\">\r\n                                    <input \r\n                                    type=\"date\"\r\n                                    className=\"form-control\"\r\n                                    name=\"fecha\"\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.cita.fecha}                                    \r\n                                    />\r\n                                </div> \r\n\r\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Hora</label>\r\n                                <div className=\"col-sa-8 col-lg-4\">\r\n                                    <input \r\n                                    type=\"time\"\r\n                                    className=\"form-control\"\r\n                                    name=\"hora\" \r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.cita.hora}                                   \r\n                                    />\r\n                                </div> \r\n                        </div>  \r\n\r\n                        <div className=\"form-group row\">\r\n                             <label className=\"col-sm-4 col-lg-2 col-form-label\">Síntomas</label>\r\n                                <div className=\"col-sa-8 col-lg-10\">\r\n                                    <textarea \r\n                                    className=\"form-control\" \r\n                                    name=\"síntomas\"\r\n                                    placeholder=\"Descripción de la Sintomatología\"\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.cita.síntomas}\r\n                                    ></textarea>\r\n                                </div> \r\n                        </div>  \r\n                       \r\n                        <input type=\"submit\" className=\"py-3 mt-2 btn btn-success btn-block\" value=\"Agregar Cita\" />\r\n                        \r\n                    </form>\r\n                    \r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\nNuevaCita.propTypes = {\r\n    crearNuevaCita : PropTypes.func.isRequired\r\n}\r\n \r\nexport default NuevaCita;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({cita, eliminarCita}) =>  ( \r\n    <div className=\"media mt-3\">\r\n        <div className=\"media-body\">\r\n            <h3 className=\"mt-0\">{cita.mascota}</h3>\r\n            <p className=\"card-text\"><span>Dueño Mascota: </span> {cita.propietario}</p>\r\n            <p className=\"card-text\"><span>Fecha: </span> {cita.fecha}</p>\r\n            <p className=\"card-text\"><span>Hora: </span> {cita.hora}</p>\r\n            <p className=\"card-text\"><span>Síntomas: </span> </p>\r\n            <p className=\"card-text\">{cita.síntomas}</p>\r\n\r\n            <button\r\n                className=\"btn btn-danger\"\r\n                onClick={() => eliminarCita(cita.id)}\r\n            >Borrar &times;</button>\r\n        </div>\r\n\r\n    </div>\r\n );\r\n\r\n Cita.propTypes = {\r\n    cita : PropTypes.object.isRequired,\r\n    eliminarCita : PropTypes.func.isRequired\r\n }\r\n\r\n \r\nexport default Cita;","import React from 'react';\r\nimport Cita from './Cita';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ListaCitas = ({citas, eliminarCita}) => {\r\n    \r\n    // Mostrar mensaje dependiendo de si hay citas o no\r\n    const mensaje = Object.keys(citas).length === 0 ? 'No hay Citas' : 'Gestione sus citas';\r\n    \r\n    return  (\r\n        <div className=\"card mt-2 py-5\">\r\n            <div className=\"card-body\">\r\n                <h3 className=\"card-title text-center\">{mensaje}</h3>\r\n    \r\n                <div className=\"lista-citas\">\r\n                    {citas.map(cita =>(\r\n                        <Cita \r\n                            key={cita.id}\r\n                            cita={cita}\r\n                            eliminarCita={eliminarCita}\r\n                        />\r\n                    ))}\r\n                </div>\r\n    \r\n            </div>\r\n    \r\n        </div>\r\n    );\r\n}\r\n\r\nListaCitas.propTypes = {\r\n    citas : PropTypes.array.isRequired,\r\n    eliminarCita : PropTypes.func.isRequired\r\n}\r\n\r\nexport default ListaCitas;","import React, { Component } from 'react';\nimport './bootstrap.min.css';\nimport Header from './components/Header';\nimport NuevaCita from './components/NuevaCita';\nimport ListaCitas from './components/ListaCitas';\n\nclass App extends Component {\n  state = { \n    citas: []\n   }\n\n   //Cuando la aplicación carga\n   componentDidMount() {\n     const citasLS = localStorage.getItem('citas');\n     if(citasLS) {\n       this.setState({\n         citas : JSON.parse(citasLS)\n       })\n     }  \n   }\n\n   //cuando agregamos o eliminamos una cita\n   componentDidUpdate() {\n      localStorage.setItem('citas', JSON.stringify(this.state.citas));\n   }\n\n   crearNuevaCita = datos => {\n     //copiar el state actual\n     const citas = [...this.state.citas, datos];\n\n     //agregar el nuevo state\n     this.setState({\n       citas\n     })\n   }\n\n   // elimina las citas del state\n   eliminarCita = id => {\n      // tomar una copia del state\n      const citasActuales = [...this.state.citas];\n\n      //utilizar filter para sacar el elemento @id de la Array\n      const citas = citasActuales.filter(cita => cita.id !== id )\n\n      //actualizar el state\n      this.setState({\n        citas\n      })\n\n   }\n   \n  render() { \n    return ( \n      <div className=\"container\">\n        <Header \n          titulo='Administrador de Citas Veterinarias'\n        />\n\n        <div className=\"row\">\n            <div className=\"col-md-10 mx-auto\">\n                <NuevaCita \n                  crearNuevaCita={this.crearNuevaCita}\n                />\n            </div>\n\n            <div className=\"mt-5 col-md-10 mx-auto\">\n              <ListaCitas \n                citas={this.state.citas}\n                eliminarCita={this.eliminarCita}\n              />\n            </div>\n        </div>\n      </div>\n     );\n  }\n}\n \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}